# Generated by Django 5.2.1 on 2025-05-30 19:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models
from django.db import migrations
from django.contrib.auth.hashers import make_password
def create_users(apps, schema_editor):
    User = apps.get_model("core", "User")
    users = [
        ("admin@gmail.com", "admin123", "admin", "Admin"),
        ("sarah.j@gmail.com", "frontend123", "frontend", "Sarah Johnson"),
        ("michael.c@gmail.com", "frontend123", "frontend", "Michael Chen"),
        ("david.s@gmail.com", "backend123", "backend", "David Smith"),
        ("emily.b@gmail.com", "backend123", "backend", "Emily Brown"),
        ("sophie.t@gmail.com", "design123", "designer", "Sophie Turner"),
        ("alex.r@gmail.com", "design123", "designer", "Alex Rivera"),
        ("james.w@gmail.com", "testing123", "qa", "James Wilson"),
        ("lisa.a@gmail.com", "testing123", "qa", "Lisa Anderson"),
    ]
    for email, password, role, full_name in users:
        username = email.split("@")[0]
        first, last = full_name.split()
        User.objects.create(
            username=username,
            email=email,
            password=make_password(password),
            role=role,
            first_name=first,
            last_name=last,
            is_superuser=(role == "admin"),
            is_staff=(role == "admin")
        )


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0001_initial'),
    ]
    operations = [
        migrations.RunPython(create_users),
    ]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('frontend', 'Frontend Developer'), ('backend', 'Backend Developer'), ('designer', 'Designer'), ('qa', 'QA Tester')], default='frontend', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

    